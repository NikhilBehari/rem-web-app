{"version":3,"sources":["resources/remlogo_horizontal.png","components/DonateAmountButton.js","components/DonateButton.js","components/DonateForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DonateAmountButton","this","props","onClick","amount","filled","className","React","Component","DonateButton","enabled","style","cursor","opacity","donation_amts","DonateForm","state","charityAmount","parseInt","charityName","charityDescription","handleClick","bind","handleOtherClick","handleOtherChange","setState","event","target","value","map","index","Number","isInteger","indexOf","onChange","replace","App","query","URLSearchParams","useLocation","search","src","rem_logo","alt","get","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ab5dede3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/remlogo_horizontal.b0d08b48.png\";","import React from 'react';\n\nclass DonateAmountButton extends React.Component {\n  render(){\n    const{onClick, amount, filled} = this.props;\n    return(\n      <button onClick={onClick} className={filled ? 'Donation-amount-button-filled' : 'Donation-amount-button'} >\n      {amount}\n      </button>\n      );\n    }\n  }\nexport default DonateAmountButton;\n","import React from 'react';\n\nclass DonateButton extends React.Component {\n  render(){\n    const{onClick, enabled} = this.props;\n    return(\n      <button onClick={onClick} className=\"Donation-button\" style={ enabled ? {} : { cursor:'not-allowed', opacity: 0.6}}>\n      DONATE\n      </button>\n      );\n    }\n  }\nexport default DonateButton;\n","import React from 'react';\nimport DonateAmountButton from './DonateAmountButton.js'\nimport DonateButton from './DonateButton.js'\n\nconst donation_amts = [10, 20, 50, 'Other'];\n\nclass DonateForm extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      charityAmount: parseInt(this.props.charityAmount),\n      charityName: this.props.charityName,\n      charityDescription: this.props.charityDescription\n    }\n    \n    this.handleClick = this.handleClick.bind(this);\n    this.handleOtherClick = this.handleOtherClick.bind(this);\n    this.handleOtherChange = this.handleOtherChange.bind(this);\n\n  }\n  \n  handleClick(amount){\n    this.setState(state => ({\n      charityAmount: amount\n    }))\n  }\n  \n  handleOtherClick(){\n    this.setState(state => ({\n      charityAmount: null\n    }))\n  }\n  \n  handleOtherChange(event){\n    this.setState(state => ({\n      charityAmount: event.target.value\n    }))\n  }\n  \n  render(){\n    return(\n      <div>\n        <div className=\"Charity-header\">\n          {this.state.charityName}\n        </div>\n        <div className=\"Charity-subheader\">\n          {this.state.charityDescription}\n        </div>\n        <hr/>\n        {donation_amts.map(function(amount, index){\n          return <DonateAmountButton \n            onClick={Number.isInteger(amount) ? this.handleClick.bind(this, amount) : \n              this.handleOtherClick} \n            amount={Number.isInteger(amount) ? \"$\" + amount : amount} \n            filled={Number.isInteger(amount) ? \n              this.state.charityAmount == amount : \n              donation_amts.indexOf(parseInt(this.state.charityAmount)) == -1} />;\n        }, this)}\n        {donation_amts.indexOf(parseInt(this.state.charityAmount)) > -1 ? null :\n           <form> \n            <label>\n            Amount:   \n            <span className=\"Currency-box\">\n            $\n            <input value={this.state.charityAmount} onChange={event => this.setState({charityAmount: event.target.value.replace(/\\D/,'')})}/>\n            </span>\n            </label> \n           </form>\n         }\n         <div className=\"More-info\">\n         More information about the charity being donated to.\n         </div>\n         <div className=\"More-info\">\n         Information about donations\n         </div>\n         <DonateButton\n          onClick={null}\n          enabled={Number.isInteger(this.state.charityAmount)}\n         />\n      </div>\n      );\n    }\n  }\nexport default DonateForm;\n","import React from 'react';\nimport rem_logo from './resources/remlogo_horizontal.png';\nimport DonateForm from './components/DonateForm.js'\nimport './App.css';\nimport {\n  useLocation\n} from \"react-router-dom\";\n\n\n// A custom hook that builds on useLocation to parse\n// the query string for you.\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nfunction getDescription(){\n  return \"Put breif description of charity here\"\n}\n\nfunction App() {\n  let query = useQuery();\n  \n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={rem_logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <DonateForm charityName={query.get(\"name\")} charityDescription={getDescription()} charityAmount={query.get(\"amount\")}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {\n  BrowserRouter as Router\n} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n  <Router>\n    <App />\n  </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}